################
#
# This is build-parameters fo LLVM/Linux.
# Neither for LLVM/MinGW and GCC.
#
## CLANG
CCMAKE_CC=clang
CCMAKE_CXX=clang++

if [ -v CC_SUFFIX ] ; then
   CCMAKE_CC=${CCMAKE_CC}-${CC_SUFFIX}
   CCMAKE_CXX=${CCMAKE_CXX}-${CC_SUFFIX}
fi
if [ -v CC_PREFIX ] ; then
   CCMAKE_CC=${CC_PREFIX}-${CCMAKE_CC}
   CCMAKE_CXX=${CC_PREFIX}-${CCMAKE_CXX}
fi
if [ -v CC_PATH ] ; then
   CCMAKE_CC=${CC_PATH}/${CCMAKE_CC}
   CCMAKE_CXX=${CC_PATH}/${CCMAKE_CXX}
fi

case ${MAJOR_ARCH} in
   "AMD64" | "amd64" | "x86_64" | "X86_64" )
   . ./params/archdef_x86_64.dat
   ;;
   "IA32" | "ia32" | "x86" | "X86" )
   . ./params/archdef_ia32.dat
   ;;
   * )
   ARCH_FLAGS=""
   ;;
esac

case ${USE_RADICAL_OPTIMIZE} in
   "Yes" | "yes" | "YES" )
      MAKEFLAGS_BASE3=" \
               -O3 \
	       ${ARCH_FLAGS}  \
	       -Wall \
               ${MAKEFLAGS_BASE} \
	       "
	       ;;
   "No" | "no" | "NO" | * )
      MAKEFLAGS_BASE3=" \
               -O2 \
	       -mtune=generic \
	       -ftree-vectorize \
	       -funroll-loops \
	       ${ARCH_FLAGS} \
	       -Wall \
               ${MAKEFLAGS_BASE} \
	       "
	       ;;
esac

case ${USE_SANITIZER} in
   "Yes" | "yes" | "YES" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fsanitize=address \
	       -fsanitize=undefined \
	       -fsanitize=vptr \
		   "
		   ;;
   "No" | "no" | "NO" | * )
		   ;;
esac	

case ${USE_STACK_PROTECTION} in
   "Yes" | "yes" | "YES" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fstack-protector \
		   "
		   ;;
   "All" | "all" | "ALL" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fstack-protector-all \
		   "
		   ;;
   "Strong" | "strong" | "STRONG" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fstack-protector-strong \
		   "
		   ;;
   "No" | "no" | "NO" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fno-stack-protector \
		   "		   
		   ;;
   "Default" | "default" | "DEFAULT" | * )
           ;;
esac	

#if [ -n "${LTO_THREADS}" ] ;  then 
#   LTO_FLAGS="-flto=${LTO_THREADS} -flto-compression-level=9 ${LTO_FLAGS}"
#   LTO_FLAGS2="-flto -ffat-lto-objects"
#else
#   LTO_FLAGS=""
#   LTO_FLAGS2=""
#fi
case ${USE_LTO} in
   "Yes" | "yes" | "YES" )
    MAKEFLAGS_BASE2="${MAKEFLAGS_BASE3} -flto=thin  -msse -msse2 -DNDEBUG" 
    MAKEFLAGS_LINK_BASE2="${MAKEFLAGS_BASE3} -flto=thin -fwhole-program-vtables -msse -msse2"
    ;;
   "No" | "no" | "NO" | * )
    MAKEFLAGS_BASE2="${MAKEFLAGS_BASE3} -msse -msse2 -DNDEBUG" 
    MAKEFLAGS_LINK_BASE2="${MAKEFLAGS_BASE3}"
    ;;
esac	

case ${CSP_DEBUG} in
   "Yes" | "yes" | "YES" )
      MAKEFLAGS_BASE3="-ggdb -\
 	        -Wreserved-user-defined-literal \
 	        -fslp-vectorize \
 	        -fvectorize \
		-fstrict-vtable-pointers \
		-fstrict-enums \
		-std=c++11 \
		${MAKEFLAGS_BASE3} \
	        "
      MAKEFLAGS_DLL_LINK_BASE="-g -ggdb -gz ${MAKEFLAGS_BASE3} -DNDEBUG"
	       ;;
	       
   "No" | "no" | "NO" | *)
      MAKEFLAGS_BASE3="  \
 	        -Wreserved-user-defined-literal \
 	        -fslp-vectorize \
 	        -fvectorize \
 	        -msse -msse2 \
		-fstrict-vtable-pointers \
		-fstrict-enums \
		-std=c++11 \
		${MAKEFLAGS_BASE3} \
	        "
       MAKEFLAGS_DLL_LINK_BASE="-s ${MAKEFLAGS_BASE3}"
		;;
esac

case ${USE_OPENMP} in
   "Yes" | "yes" | "YES" )
     CMAKE_APPENDFLAG="${CMAKE_APPENDFLAG} -DUSE_OPENMP=YES"
   ;;
   "No" | "no" | "NO" | * )
     CMAKE_APPENDFLAG="${CMAKE_APPENDFLAG} -DUSE_OPENMP=NO"
   ;;
esac

  CMAKE_APPENDFLAG="${CMAKE_APPENDFLAG} -DCMAKE_AR:STRING=llvm-ar-${LLVM_VERSION} -DCMAKE_NM:STRING=llvm-nm-${LLVM_VERSION} -DCMAKE_RANLIB:STRING=llvm-ranlib-${LLVM_VERSION}"
  CMAKE_APPENDFLAG="${CMAKE_APPENDFLAG} -DCMAKE_AS:STRING=llvm-as-${LLVM_VERSION}"


