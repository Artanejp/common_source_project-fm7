################
#
# This is build-parameters fo LLVM/Linux.
# Neither for LLVM/MinGW and GCC.
#
## CLANG
CCMAKE_CC=clang
CCMAKE_CXX=clang++

if [ -v CC_SUFFIX ] ; then
   CCMAKE_CC=${CCMAKE_CC}-${CC_SUFFIX}
   CCMAKE_CXX=${CCMAKE_CXX}-${CC_SUFFIX}
fi
if [ -v CC_PREFIX ] ; then
   CCMAKE_CC=${CC_PREFIX}-${CCMAKE_CC}
   CCMAKE_CXX=${CC_PREFIX}-${CCMAKE_CXX}
fi
if [ -v CC_PATH ] ; then
   CCMAKE_CC=${CC_PATH}/${CCMAKE_CC}
   CCMAKE_CXX=${CC_PATH}/${CCMAKE_CXX}
fi

case ${MAJOR_ARCH} in
   "AMD64" | "amd64" | "x86_64" | "X86_64" )
   . ./params/archdef_x86_64.dat
   ;;
   "IA32" | "ia32" | "x86" | "X86" )
   . ./params/archdef_ia32.dat
   ;;
   * )
   ARCH_FLAGS=""
   ;;
esac

case ${USE_RADICAL_OPTIMIZE} in
   "Yes" | "yes" | "YES" )
      MAKEFLAGS_BASE3=" \
               -O3 \
 	        -Wreserved-user-defined-literal \
 	        -fslp-vectorize \
 	        -fvectorize \
		-fstrict-vtable-pointers \
		-fstrict-enums \
		-std=c++11 \
	       ${ARCH_FLAGS}  \
	       -Wall \
               ${MAKEFLAGS_BASE} \
	       "
	       ;;
   "No" | "no" | "NO" | * )
      MAKEFLAGS_BASE3=" \
               -O2 \
 	        -Wreserved-user-defined-literal \
 	        -fslp-vectorize \
 	        -fvectorize \
		-fstrict-vtable-pointers \
		-fstrict-enums \
		-std=c++11 \
	       ${ARCH_FLAGS} \
	       -Wall \
               ${MAKEFLAGS_BASE} \
	       "
	       ;;
esac

case ${USE_SANITIZER} in
   "Yes" | "yes" | "YES" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fsanitize=address \
	       -fsanitize=undefined \
	       -fsanitize=vptr \
		   "
		   ;;
   "No" | "no" | "NO" | * )
		   ;;
esac	

case ${USE_STACK_PROTECTION} in
   "Yes" | "yes" | "YES" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fstack-protector \
		   "
		   ;;
   "All" | "all" | "ALL" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fstack-protector-all \
		   "
		   ;;
   "Strong" | "strong" | "STRONG" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fstack-protector-strong \
		   "
		   ;;
   "No" | "no" | "NO" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fno-stack-protector \
		   "		   
		   ;;
   "Default" | "default" | "DEFAULT" | * )
           ;;
esac	

#LTO_FLAGS="-flto=4 -flto-compression-level=9 ${LTO_FLAGS}"
#LTO_FLAGS2="-flto -ffat-lto-objects"
LTO_FLAGS="-flto ${LTO_FLAGS}"
LTO_FLAGS2="-flto"


case ${USE_WHOLE_PROGRAM_OPTIMIZE} in
   "Yes" | "yes" | "YES" )
      LTO_FLAGS="${LTO_FLAGS} -fwhole-program -fwhole-program-vtables"
      ;;
   * )
      #LTO_FLAGS=""
      ;;
esac

case ${COMPRESS_SYMBOLS} in
   "Yes" | "yes" | "YES" )
   COMPRESS_CFLAGS="-gz=zlib"
   ;;
   "No" | "no" | "NO" | * )
   COMPRESS_CFLAGS=""
   ;;
esac

#ToDo: Its ugly hack.
if [ -z ${EXTRA_DLL_DIR} ] ; then
   EXTRA_DLL_DIR="/usr/local/lib/x86_64-linux-gnu"
fi

case ${USE_SHRINK_DEBUG_SYMBOL} in
   "Yes" | "yes" | "YES" )
       EXTRA_LINKER_FLAGS="-L${EXTRA_DLL_DIR} -fuse-ld=gold -Wl,--gdb-index -Wl,--compress-debug-sections,zlib ${EXTRA_LINKER_FLAGS}"
       EXTRA_LINKER_DLL_FLAGS="-L${EXTRA_DLL_DIR} -fuse-ld=gold -Wl,--gdb-index -Wl,--compress-debug-sections,zlib ${EXTRA_LINKER_DLL_FLAGS}"
       MAKEFLAGS_BASE3DLL="-gsplit-dwarf ${MAKEFLAGS_BASE3}"
       MAKEFLAGS_BASE3="-gsplit-dwarf ${MAKEFLAGS_BASE3}"
       ;;
esac
case ${CSP_DEBUG} in
   "Yes" | "yes" | "YES" )
      MAKEFLAGS_DLL_LINK_BASE="-ggdb ${EXTRA_LINKER_DLL_FLAGS} ${COMPRESS_CFLAGS} ${MAKEFLAGS_BASE3DLL} -DNDEBUG"
      MAKEFLAGS_DLL_BASE="-ggdb ${COMPRESS_CFLAGS} ${MAKEFLAGS_BASE3DLL} -DNDEBUG"
      MAKEFLAGS_BASE2="-ggdb ${COMPRESS_CFLAGS} ${MAKEFLAGS_BASE3} -DNDEBUG"
      ;;
   "No" | "no" | "NO" | * )
      MAKEFLAGS_DLL_LINK_BASE="${COMPRESS_CFLAGS} ${MAKEFLAGS_BASE3}"
      MAKEFLAGS_DLL_BASE="${COMPRESS_CFLAGS} ${MAKEFLAGS_BASE3}"
      MAKEFLAGS_BASE2="${COMPRESS_CFLAGS} ${MAKEFLAGS_BASE3}"
      ;;
esac
case ${USE_LTO} in
   "Yes" | "yes" | "YES" )
       MAKEFLAGS_LINK_BASE2="${EXTRA_LINKER_FLAGS} ${LTO_FLAGS} ${MAKEFLAGS_BASE2}"
       MAKEFLAGS_BASE2="${LTO_FLAGS2} ${MAKEFLAGS_BASE2}"
       ;;
   "No" | "no" | "NO" | * )
       MAKEFLAGS_LINK_BASE2="${MAKEFLAGS_BASE2}"
       MAKEFLAGS_BASE2="${MAKEFLAGS_BASE2}"
       ;;
esac

case ${USE_OPENMP} in
   "Yes" | "yes" | "YES" )
     CMAKE_APPENDFLAG="${CMAKE_APPENDFLAG} -DUSE_OPENMP=YES"
   ;;
   "No" | "no" | "NO" | * )
     CMAKE_APPENDFLAG="${CMAKE_APPENDFLAG} -DUSE_OPENMP=NO"
   ;;
esac

CMAKE_APPENDFLAG="${CMAKE_APPENDFLAG} -DCMAKE_AR:STRING=llvm-ar-${LLVM_VERSION} -DCMAKE_NM:STRING=llvm-nm-${LLVM_VERSION} -DCMAKE_RANLIB:STRING=llvm-ranlib-${LLVM_VERSION}"
CMAKE_APPENDFLAG="${CMAKE_APPENDFLAG} -DCMAKE_AS:STRING=llvm-as-${LLVM_VERSION}"


