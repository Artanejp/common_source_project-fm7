################
#
# This is build-parameters fo GCC/MinGW.
# Neither for GCC/Linux and LLVM.
#

MAKEFLAGS_BASE2="${MAKEFLAGS_BASE} -mthread=posix -pthread -mthreads"

case ${MAJOR_ARCH} in
   "AMD64" | "amd64" | "x86_64" | "X86_64" )
   . ${BASE_PATH}/params/archdef_x86_64.dat
   ;;
   "IA32" | "ia32" | "x86" | "X86" )
   . ${BASE_PATH}/params/archdef_ia32.dat
   ;;
   * )
   ARCH_FLAGS=""
   ;;
esac

case ${CSP_DEBUG} in
   "Yes" | "yes" | "YES" )
     MAKEFLAGS_BASE2="-g  ${MAKEFLAGS_BASE} -O2 \
                          ${ARCH_FLAGS}  \
			  -std=c++11 \
			  ${ADDITIONAL_CFLAGS} \
			  -DNDEBUG"
     ;;
   "No" | "no" | "NO" | * )
     MAKEFLAGS_BASE2="${MAKEFLAGS_BASE} -O2 \
                ${ARCH_FLAGS} \
		-std=c++11 \
		${ADDITIONAL_CFLAGS} \
		-DNDEBUG "
#                -ftree-vectorize \
#		-ftree-loop-optimize \
#		-floop-nest-optimize \
     ;;
esac

case ${USE_WHOLE_PROGRAM_OPTIMIZE} in
   "Yes" | "yes" | "YES" )
      LTO_FLAGS="-fwhole-program"
      ;;
   * )
      LTO_FLAGS=""
      ;;
esac

case ${USE_SANITIZER} in
   "Yes" | "yes" | "YES" )
      MAKEFLAGS_BASE2="${MAKEFLAGS_BASE2} \
	       -fsanitize=address \
	       -fsanitize=undefined \
	       -fsanitize=vptr \
		   "
		   ;;
   "No" | "no" | "NO" | * )
		   ;;
esac	

case ${USE_STACK_PROTECTION} in
   "Yes" | "yes" | "YES" )
      MAKEFLAGS_BASE3="${MAKEFLAGS_BASE3} \
	       -fstack-protector \
		   "
		   ;;
   "All" | "all" | "ALL" )
      MAKEFLAGS_BASE2="${MAKEFLAGS_BASE2} \
	       -fstack-protector-all \
		   "
		   ;;
   "Strong" | "strong" | "STRONG" )
      MAKEFLAGS_BASE2="${MAKEFLAGS_BASE2} \
	       -fstack-protector-strong \
		   "
		   ;;
   "No" | "no" | "NO" )
      MAKEFLAGS_BASE2="${MAKEFLAGS_BASE2} \
	       -fno-stack-protector \
		   "
		   ;;
   "Default" | "default" | "DEFAULT" | * )
           ;;
esac	

if [ -n "${LTO_THREADS}" ] ;  then 
   LTO_FLAGS="-flto=${LTO_THREADS} -flto-compression-level=9 ${LTO_FLAGS}"
   LTO_FLAGS2="-flto -ffat-lto-objects"
else
   LTO_FLAGS=""
   LTO_FLAGS2=""
fi
case ${USE_LTO} in
   "Yes" | "yes" | "YES" )
       MAKEFLAGS_LINK_BASE="${LTO_FLAGS} ${MAKEFLAGS_BASE2}"
       MAKEFLAGS_BASE2="${LTO_FLAGS2} ${MAKEFLAGS_BASE2}"
       ;;
   "No" | "no" | "NO" | * )
       MAKEFLAGS_LINK_BASE="${MAKEFLAGS_BASE2}"
       MAKEFLAGS_BASE2="${MAKEFLAGS_BASE2}"
       ;;
esac
case ${STRIP_SYMBOLS} in
   "Yes" | "yes" | "YES" )
     MAKEFLAGS_BASE2="-s ${MAKEFLAGS_BASE2}"
     MAKEFLAGS_LINK_BASE="-s ${MAKEFLAGS_LINK_BASE}"
   ;;
   "No" | "no" | "NO" | * )
     MAKEFLAGS_BASE2="${MAKEFLAGS_BASE2}"
     MAKEFLAGS_LINK_BASE="${MAKEFLAGS_LINK_BASE}"
   ;;
esac
case ${USE_OPENMP} in
   "Yes" | "yes" | "YES" )
     CMAKE_APPENDFLAG="${CMAKE_APPENDFLAG} -DUSE_OPENMP=YES"
   ;;
   "No" | "no" | "NO" | * )
     CMAKE_APPENDFLAG="${CMAKE_APPENDFLAG} -DUSE_OPENMP=NO"
   ;;
esac

#CMAKE_APPENDFLAG="-DUSE_QT5_4_APIS=ON -DUSE_MOVIE_LOADER=ON \

CMAKE_APPENDFLAG=" -DUSE_QT5_4_APIS=ON \
                   -DUSE_MOVIE_LOADER=ON \
                   -DUSE_MOVIE_SAVER=ON \
                   -DCMAKE_AR:STRING=i686-w64-mingw32-gcc-ar \
                   -DCMAKE_LD:STRING=i686-w64-mingw32-gcc-ld \
		   -DCMAKE_NM:STRING=i686-w64-mingw32-gcc-nm \
		   -DCMAKE_RANLIB:STRING=i686-w64-mingw32-gcc-ranlib \
	   "

